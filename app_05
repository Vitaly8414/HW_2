"""
Необходимо создать API для управления списком задач. 
Каждая задача должна содержать заголовок и описание.
Для каждой задачи должна быть возможность указать статус (выполнена/не выполнена).

API должен содержать следующие конечные точки:
— GET /tasks — возвращает список всех задач.
— GET /tasks/{id} — возвращает задачу с указанным идентификатором.
— POST /tasks — добавляет новую задачу.
— PUT /tasks/{id} — обновляет задачу с указанным идентификатором.
— DELETE /tasks/{id} — удаляет задачу с указанным идентификатором.
Для каждой конечной точки необходимо проводить валидацию данных запроса и ответа. Для этого использовать библиотеку Pydantic.

установить:
pip install fastapi
pip install uvicorn[standard]
pip install pydantic

запустить с помощью команды:
uvicorn main:app --reload

uvicorn main:app
main - это имя файла, содержащего ваше приложение FastAPI, 
а app - это имя экземпляра приложения FastAPI. 
Если вы используете другое имя файла или экземпляра приложения, замените main и app соответственно.
"""


from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List

app = FastAPI()

class Task(BaseModel):
    title: str
    description: str
    status: bool

tasks = []

@app.get("/tasks")
async def get_tasks():
    return tasks

@app.get("/tasks/{id}")
async def get_task(id: int):
    for task in tasks:
        if task["id"] == id:
            return task
    raise HTTPException(status_code=404, detail="Task not found")

@app.post("/tasks")
async def create_task(task: Task):
    task_dict = task.dict()
    task_dict["id"] = len(tasks) + 1
    tasks.append(task_dict)
    return task_dict

@app.put("/tasks/{id}")
async def update_task(id: int, task: Task):
    for i, t in enumerate(tasks):
        if t["id"] == id:
            tasks[i] = task.dict()
            tasks[i]["id"] = id
            return tasks[i]
    raise HTTPException(status_code=404, detail="Task not found")

@app.delete("/tasks/{id}")
async def delete_task(id: int):
    for i, task in enumerate(tasks):
        if task["id"] == id:
            tasks.pop(i)
            return {"message": "Task deleted successfully"}
    raise HTTPException(status_code=404, detail="Task not found")